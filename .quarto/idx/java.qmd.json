{"title":"Java","markdown":{"yaml":{"title":"Java"},"headingText":"Modelo vista controlador","containsRefs":false,"markdown":"\n\n\n![Modelo Vista controlador](/Imagenes/MVC.jpg){.lightbox}\n\n# Programación de objetos\n\n```{mermaid}\nclassDiagram \nTable <|-- > Menu : order\nTable: number\nMenu: name\nMenu: type\nMenu: price\nMenu: dishes\n\n```\n\n\n```{mermaid}\nclassDiagram\n    class Order\n    Order : +Fecha\n    Order : +Comanda\n    Order : +Numero Mesa\n    Order : +Numero personas\n    Order : +Menu\n    Order : +Pagado\n\n```\n\n\n\n # ArrayList y hashmap\n\n![ArrayList y HashMap](/Imagenes/arraylistHashmap.jpeg){.lightbox}\n\n**ArrayList** no hay valor, solo objetos. \n**Hashmaps** es un mapa de hash. Una colección de datos. \n\n #Controller y Manager\n\n![Controller y Manager](/Imagenes/controllerMenuManager.jpeg){.lightbox}\n\n\nLas clases ***menu***, ***table***, ***order*** son clases \"core\" del Model. Son clases no estáticas. \nLas clases ***Table manager*** y ***OrderManager*** son clases estáticas. Son clases de gestión. \n\n**Controller** mando ordenes, pero no ejecuta.\n**Manager** ejecuta.\n\nLos metódos ***no estáticos*** necesitas un objeto para seren ejecutados. \n\n#Operaciones CRUD\n\n**C**reat\n**R**ead\n**U**pdat\n**D**elet\n\n# Chuleta Java\n\n### 1. Estructura básica de un programa en java: \n\n```java\n    public class MyProgram {\n        public static void main (String[] args){\n// Code here\n        }\n    }\n\n``` \n\n### 2. Variables y tipos de datos\n\n**int** numeroEntero = 10;\n\n**double** numero decimal = 0,1;\n\n**char** caracter = 'a';\n\n**String** cadenaTexto = \"Hola!\"; \n\n### 3. Operadores básicos\n\n#### 3.1 Aritmeticos\nint suma = a+b;\n\nint resta = a-b; \n\nint multiplicacion = a*b;\n\ndouble division = a/b; \n\n#### 3.2 Comparacion\nboolean esIgual= (a==b);\n\nboolean esMayorQue= (a>b);\n\n#### 3.3 Lógicos \nboolean and= (condicion1 && condicion2); \n\nboolean or= (condicion1 || condicion2);\n\n### 4. Estructura de control de flujo\n\n#### 4.1 If-Else\n\n```java\nif (condicion){\n    //Codigo si la condición es verdadera\n} else {\n    //Codigo si la condicion es falsa\n}\n\n```\n\n#### 4.2 Switch \n```java\nswitch (valor){\n    case1: \n    //codigo para el caso1\n    break;\n    case2: \n    // codigo para el caso 2\n    break;\n    default: \n    //codigo por defecto\n}\n```\n\n#### 4.3 Bucles\n```java\n    for (int i=0; i<5; i++){\n        //codigo a repetir\n    }\n    while (condicion){\n        //codigo a repetir mientras la condicion sea verdadera\n    }\n```\n\n\n### 5.Arrays\n\n#### 5.1 Declaración e inicialización\n\n```java\n\nint[]numeros={1,2,3,4,5};\n```\n\n#### 5.2 Acceso a elementos de una array\n```java\nint primerNumero = numeros[0];\n```\n\n#### 5.3 Interación através de un array \n```java\nfor (int i=0; i<numeros.leight; i++){\n// Codigo para cada elemento\n    }\n```\n\n### 6. Métodos y funciones\n#### 6.1 Declaración de un método\n```java\n    public static int sumar (int a, int b){\n        return a+b;\n    }\n ```\n\n#### 6.2 Llamada a un método\n\n```java\n int resultado = sumar (3,4);\n```\n\n### 7. Métodos y exepciones\n```java\n    try{\n        // Codigo que podria lanar una exepcion\n    } catch (tipodeExepcion){\n        // Tipo de exepción\n    } finaly { //Codigo que se ejecuta siempre\n\n    }\n\n```\n\n### Variable de referencia\nEs la forma que tengo para llegar a un objeto, no es un objeto en si. Ejemplo: la etiqueta en una caja, no es la caja en si, pero describe lo que hay dentro de una caja. \n\nToda clase de java tiene atributos y hace algo, una acción: \n\nOperaciones no estáticas de Arraylist: Guest, remove... \n\n**Método**: Acción\n\n**Atributos**: características\n\nUn objeto se ceea en la memoria ram, pero lo más importante es la variable de referencia \n\n```{dot}\ngraph {\n  node [shape=square, style=filled, fillcolor=lightblue]\n  Person [fillcolor=orange]\n  Children [fillcolor=lightgray]\n  Mother [fillcolor=lightgray]\n  Student [fillcolor=lightgray]\n  Teacher [fillcolor=lightgray]\n\n  Person -- Children \n  Person -- Mother \n  Person -- Student \n  Person -- Teacher \n}\n```\n\n**Class:** Person\n**Objects:** Teacher, Student, Mother, Children. \n\n\nUn objeto es una **instancia** de una clase.\n\n### Road Map: \n\n1. Se crea **clase** y se instancia **objetos** y la **variable de referencia**;\n2. Las **clases** y los **objetos** se relacionan de dos maneras: **Ser (herencia), tener (composición); \n3. Se relacionan de forma complicada. Se escala y empiezan los problemas de cambio de tipo, etiquetas, etc... \n\n\n### Variable de referencia\n![Variable de Referencia](/Imagenes/variableReferencia.jpg){.lightbox}\n\n::: {.callout-note}\nTener claro: \n1. Clase\n2. Como se crea un objeto de la clase\n3. Etiqueta\n4. Relaciones/ como se relacionan las clases\n5. Casting\n:::","srcMarkdownNoYaml":"\n\n# Modelo vista controlador\n\n![Modelo Vista controlador](/Imagenes/MVC.jpg){.lightbox}\n\n# Programación de objetos\n\n```{mermaid}\nclassDiagram \nTable <|-- > Menu : order\nTable: number\nMenu: name\nMenu: type\nMenu: price\nMenu: dishes\n\n```\n\n\n```{mermaid}\nclassDiagram\n    class Order\n    Order : +Fecha\n    Order : +Comanda\n    Order : +Numero Mesa\n    Order : +Numero personas\n    Order : +Menu\n    Order : +Pagado\n\n```\n\n\n\n # ArrayList y hashmap\n\n![ArrayList y HashMap](/Imagenes/arraylistHashmap.jpeg){.lightbox}\n\n**ArrayList** no hay valor, solo objetos. \n**Hashmaps** es un mapa de hash. Una colección de datos. \n\n #Controller y Manager\n\n![Controller y Manager](/Imagenes/controllerMenuManager.jpeg){.lightbox}\n\n\nLas clases ***menu***, ***table***, ***order*** son clases \"core\" del Model. Son clases no estáticas. \nLas clases ***Table manager*** y ***OrderManager*** son clases estáticas. Son clases de gestión. \n\n**Controller** mando ordenes, pero no ejecuta.\n**Manager** ejecuta.\n\nLos metódos ***no estáticos*** necesitas un objeto para seren ejecutados. \n\n#Operaciones CRUD\n\n**C**reat\n**R**ead\n**U**pdat\n**D**elet\n\n# Chuleta Java\n\n### 1. Estructura básica de un programa en java: \n\n```java\n    public class MyProgram {\n        public static void main (String[] args){\n// Code here\n        }\n    }\n\n``` \n\n### 2. Variables y tipos de datos\n\n**int** numeroEntero = 10;\n\n**double** numero decimal = 0,1;\n\n**char** caracter = 'a';\n\n**String** cadenaTexto = \"Hola!\"; \n\n### 3. Operadores básicos\n\n#### 3.1 Aritmeticos\nint suma = a+b;\n\nint resta = a-b; \n\nint multiplicacion = a*b;\n\ndouble division = a/b; \n\n#### 3.2 Comparacion\nboolean esIgual= (a==b);\n\nboolean esMayorQue= (a>b);\n\n#### 3.3 Lógicos \nboolean and= (condicion1 && condicion2); \n\nboolean or= (condicion1 || condicion2);\n\n### 4. Estructura de control de flujo\n\n#### 4.1 If-Else\n\n```java\nif (condicion){\n    //Codigo si la condición es verdadera\n} else {\n    //Codigo si la condicion es falsa\n}\n\n```\n\n#### 4.2 Switch \n```java\nswitch (valor){\n    case1: \n    //codigo para el caso1\n    break;\n    case2: \n    // codigo para el caso 2\n    break;\n    default: \n    //codigo por defecto\n}\n```\n\n#### 4.3 Bucles\n```java\n    for (int i=0; i<5; i++){\n        //codigo a repetir\n    }\n    while (condicion){\n        //codigo a repetir mientras la condicion sea verdadera\n    }\n```\n\n\n### 5.Arrays\n\n#### 5.1 Declaración e inicialización\n\n```java\n\nint[]numeros={1,2,3,4,5};\n```\n\n#### 5.2 Acceso a elementos de una array\n```java\nint primerNumero = numeros[0];\n```\n\n#### 5.3 Interación através de un array \n```java\nfor (int i=0; i<numeros.leight; i++){\n// Codigo para cada elemento\n    }\n```\n\n### 6. Métodos y funciones\n#### 6.1 Declaración de un método\n```java\n    public static int sumar (int a, int b){\n        return a+b;\n    }\n ```\n\n#### 6.2 Llamada a un método\n\n```java\n int resultado = sumar (3,4);\n```\n\n### 7. Métodos y exepciones\n```java\n    try{\n        // Codigo que podria lanar una exepcion\n    } catch (tipodeExepcion){\n        // Tipo de exepción\n    } finaly { //Codigo que se ejecuta siempre\n\n    }\n\n```\n\n### Variable de referencia\nEs la forma que tengo para llegar a un objeto, no es un objeto en si. Ejemplo: la etiqueta en una caja, no es la caja en si, pero describe lo que hay dentro de una caja. \n\nToda clase de java tiene atributos y hace algo, una acción: \n\nOperaciones no estáticas de Arraylist: Guest, remove... \n\n**Método**: Acción\n\n**Atributos**: características\n\nUn objeto se ceea en la memoria ram, pero lo más importante es la variable de referencia \n\n```{dot}\ngraph {\n  node [shape=square, style=filled, fillcolor=lightblue]\n  Person [fillcolor=orange]\n  Children [fillcolor=lightgray]\n  Mother [fillcolor=lightgray]\n  Student [fillcolor=lightgray]\n  Teacher [fillcolor=lightgray]\n\n  Person -- Children \n  Person -- Mother \n  Person -- Student \n  Person -- Teacher \n}\n```\n\n**Class:** Person\n**Objects:** Teacher, Student, Mother, Children. \n\n\nUn objeto es una **instancia** de una clase.\n\n### Road Map: \n\n1. Se crea **clase** y se instancia **objetos** y la **variable de referencia**;\n2. Las **clases** y los **objetos** se relacionan de dos maneras: **Ser (herencia), tener (composición); \n3. Se relacionan de forma complicada. Se escala y empiezan los problemas de cambio de tipo, etiquetas, etc... \n\n\n### Variable de referencia\n![Variable de Referencia](/Imagenes/variableReferencia.jpg){.lightbox}\n\n::: {.callout-note}\nTener claro: \n1. Clase\n2. Como se crea un objeto de la clase\n3. Etiqueta\n4. Relaciones/ como se relacionan las clases\n5. Casting\n:::"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"java.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"united","title":"Java"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}